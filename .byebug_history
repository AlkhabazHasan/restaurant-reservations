c
result
resukt
c
result
c
@guest_search
guest_search
c
@guest_search
c
@guest_search
guest_search
c
@guest_search
c
@guest_search
.order("created_at DESC")
c
@guests
c
@guests
c
@guests
c
@guests
c
@guests
c
@guests
c
@guests
c
@guests
c
@guests
c
@guest
@guests
c
@guests
c
@guests
c
n
@guests
c
@guests.count
@guests
c
@guests.count
@guests
c
@guests
c
Guest.where("first_name ILIKE ?", "%Nikola%")
Guest.where("first_name ILIKE ?", "%#{search}%")
Guest.where("first_name ILIKE Nikola")
params[:search]
@guests
@guess
c
Guest.all.where(:first_name => "Nikola")
@guests
c
n
c
n
c
n
params
c
params
c
self.managers.each do |man| return false if man.id != manager.id end
self.managers.each do |man|
self.managers
c
self.managers
c
self.managers.each { |man| return true if man.id != manager.id }
self.managers.each { |man| return false if man.id != manager.id }
self.managers.each.id == manager
self.managers.each { |man| man.id == manager.id }
self.managers.each { |man| if man.id == manager.id }
self.managers.each { |man| if man.id == manager.id 
self.managers.each { |man| if man.id == manager.id
self.managers.include?(manager)
self.managers.include(manager)
self.managers
exit
c
 !self.seats.where(:x => x, :y => y).empty?
self.seats.where(:x => x, :y => y).empty?
self.seats.where(:x => x, :y => y).emtpy?
self.seats.where(:x => x, :y => y)
exit
c
self.seats.where(:x => 9, :y => 1)
self.seats.where(:x => 9, :y => 2)
self.seats.where(:x => 9, :y => 4)
self.seats.where(:x => 9, :y => 5)
self.seats
c
@configuration.save
@configuration.seats
@configuration
c
seats.values.select { |values| values[:reserved] }
c
seats.values.select { |key| key[:reserved] }
seats.values.each.select { |key| key.contains?("reserved") }
seats.select { |key| key.contains?("reserved") }
seats.values.select { |key| key.contains?("reserved") }
seats.values.select { |key| key.contains?("reserved")
seats.values.slice("reserved")
seats.values.slice(:reserved)
seats.values.flatten
seats.values.select
seats.values.select { |reserved| }
seats.values.select { |val| }
seats.values.select { |val| val == "reserved" }
seats.values.select { :reserved = true }
seats.values.select(:reserved, true)
seats.values.select(:reserved => true)
seats.values.where(:reserved => true)
seats.values
seats = params.select { |key, value| key.to_s.include?("seat") }
params.select { |key, value| key.to_s.include?("seat") }
params.select { |key| key.to_s.include?("seat") }
params.select { |key| key.to_s.contains("seat") }
params.select { |key| key.to_s.contains("seat")
seats
seas
c
params
params[:id]
c
params[:seat_1_1]
c
params
c
params
c
params[:seat]
params
c
@inverse_friendship.friend_id = 3
current_user.id
current_user
@friend.friendships
@friend
c
C
c
@friendship.destroy
c
n
c
 @friendship.friend.friendships.where(:friend_id => current_user.id).first.destroy
 @friendship.friend.friendships.where(:friend_id => current_user.id).destroy
 @friendship.friend.friendships.where(:friend_id => current_user.id)
 @friendship.friend.friendships.where(:friend_id => current_user.user_id)
c
friend.where(:friend_id => current_user.id)
friend.select(:friend_id => current_user.id).first
friend.select(:friend_id => current_user.id)
friend = @friendship.friend.friendships
@friendship.friend.friendships.first
@friendship.friend.friendships
@friendship.friend.friendships.find(:id => 1)
@friendship.friend.friendships.find(:friend_id => @friendship.user_id)
@friendship.friend.friendships
@friendship.friend
c
n
@friend.friendships
@friend
@inverse_friendship
c
current_user.friendships
current_user.friendship
current_user.friends
@friend.inverse_friendships
@friend
@friend.inverse_friends
c
@friend.friendships.count
n
@friend.friendships.count
@friend.friendships
@guest.friendships
@friend
c
params
params[:friend_id]
@friendship
n
params
c
params[:manager]
params
c
params
parms
c
