c
current_user.id == params[:guest_id]
params[:guest_id]
current_user.id
params[:guest_id]
n
current_user
c
params
@user.invitations
@user
n
m
c
params
n
current_user
exit
c
review.reservation.user
friend.id
c
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true).count
c
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true).count
c
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true).count
friend
c
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true).count
c
friend
c
friend
c
friend
c
friend
friend.reservations
friend.id
review.reservation.user.id
review
c
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true)
n
visits
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true).count
review.reservation.invitations.where(:user_id => friend.id, :confirmed => true)
review.reservation
friend
c
step
c
visits
n
self.reviews
friend
c
n
number
c
Invitation.all.pluck(:confirmed)
@invitation
c
n
@invitation = @user.invitations.find(params[:id])
n
Guest.find(params[:guest_id])
params
current_user
n
c
n
params
c
exit
review.reservation.is_a?(Reservation)
review.reservation.of_type?(Reservation)
review.reservation
c
params[:restaurant_id]
params
c
n
self.reviews.empty?
self.reviews
self.reviews || !self.reviews.empty?
c
self.reviews
c
User.joins(:friendships).where("friendships.friend_id" => current_user.id).count
User.joins(:friendships).where("friendships.friend_id" => current_user.id)
User.joins(:friendships).count
User.joins(:friendships)
Users.joins(:friendships)
@friends.count
@friends
c
@friends
c
self.id
friend.id
Friendship.where(:user_id => self.id, :friend_id => friend.id)
c
Guest.joins(:friendships).where("users.id" => current_user.id).count
Guest.joins(:friendships).where("users.id" => current_user.id)
Guest.joins(:friendships).where("guest.id" => current_user.id)
Guest.joins(:friendships).count
Guest.joins(:friendships)
Guest.joins(@friendships)
Guest.joins(@friendships).each { |e| p e }
Guest.joins(@friendships)
Guest.joins("current_user.friendships")
current_user.friendships.joins(:guest).each { |e| p e }
current_user.friendships.joins(:guests).each { |e| p e }
current_user.friendships.joins(:users).each { |e| p e }
current_user.friendships.joins(:users).all
current_user.friendships.joins(:users)
c
@friends.sort_by { |k, v| v[:age] }
@friends.values
@friends.values[:first_name]
c
@friends.sort_by(:first_name)
@friends.sort
@friends
c
n
@manager
params
c
invitation
index
c
friendship.friend.reviews.where(:restaurant_id => restaurant_id).average(:rating).to_f
friendship.friend.reviews.where(:restaurant_id => restaurant_id).average(:rating)
friendship.friend.reviews.where(:restaurant_id => restaurant_id)
friendship.friend.reviews
friendship.friend
friendship
c
n
params[:rating]
params
c
params
c
params
c
self[:reservation_id]
self
self.reservation
self[:reservation]
c
exit
date_range.cover?(time.to_time)
time.to_time
reservation.date.type
reservation.date.class?
time.to_datetime.localtime
time.to_date
time.to_datetime
time.to_datetie
time
reservation.date.localtime
(reservation.date..reservation.date + reservation.duration.hours).cover?(time.to_datetime)
reservation.date..reservation.date + reservation.duration.hours.cover?(time.to_datetime)
reservation.date..reservation.date + reservation.duration.hours
reservation.date
time.to_datetime
time.to_datetime.localtime
time.localtime
DateTime.parse(time).localtime
DateTime.parse(time)
date_range.cover?(DateTime.parse(time))
date_range.cover?(time.localtime)
date_range.cover?(time.to_datetime)
time.to_datetime
time
date_range
date_range.cover?(time)
c
date_range.cover?(Time.now)
c
date_range.cover?(Time.now)
c
date_range.cover?(Time.now)
c
Time.now
date_range
date_range.cover?(Time.now)
n
date_range.cover?(Time.now)
Time.now
date_range
c
def protect_from_forgery? { false }
def protect_from_forgery?
def protect_from_forgery? false end
protect_from_forgery?
c
self.date
c
Application.time_zone
c
Time.now
self.date
c
self.date
c
Time.now
time.now
self.date
c
self.date
now
c
Time.now
date_range
Time.now
date_range.cover?(Time.now.to_datetime)
c
date_range.cover?(Time.now.to_datetime)
c
date_range.cover?(Time.now.to_datetime)
c
date_range.cover?(Time.now.to_datetime)
c
date_range.cover?(Time.now.to_datetime)
n
self.date.in_time_zone("Belgrade").to_datetime
self.date.in_time_zone("Belgrade").to_date_time
self.date.in_time_zone("Belgrade")
c
self.date.in_time_zone("Belgrade")
self.date.in_time_zone
self.date
Time.now.in_time_zone("Belgrade").now.to_datetime
Time.in_time_zone("Belgrade").now.to_datetime
c
self.date
Time.now.to_datetime
date_range.cover?(Time.now.to_datetime)
date_range
c
date_range.cover?(Time.now.to_datetime)
Time.now.to_datetime
self.date.to_datetime
date_range
c
self.date.to_datetime
Time.now
Time.now.to_datetime
Time.now.to_date_time
Time.now.to_date
self.date
